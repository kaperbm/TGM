package com.example.accessingdatamysql;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

@Controller
@RequestMapping(path="/demo")
public class MainController {

 @Autowired
 private DataWarehouseRepository dataWarehouseRepository;

 @Autowired
 private ProductRepository productRepository;

 @PostMapping(path="/datawarehouse/add")
 public @ResponseBody String addDataWarehouse(@RequestParam String name) {
  Data_Warehouse dataWarehouse = new Data_Warehouse();
  dataWarehouse.setName(name);
  dataWarehouseRepository.save(dataWarehouse); // Save the data warehouse

  // Erstelle fünf Produkte und ordne sie dem Data Warehouse zu
  for (int i = 1; i <= 10; i++) {
   Product product = new Product();
   product.setName("Product " + i + " for " + name);
   product.setGewicht("Weight for Product " + i + " in " + name);
   product.setDataWarehouse(dataWarehouse); // Setze das Data Warehouse für das Produkt
   productRepository.save(product); // Speichere das Produkt
  }

  return "Data warehouse and 5 products saved successfully";
 }

 @DeleteMapping(path="/datawarehouse/deleteAll")
 public @ResponseBody String deleteAllDataWarehouses() {
  dataWarehouseRepository.deleteAll(); // Lösche alle Data Warehouses
  return "All data warehouses deleted successfully";
 }

 @GetMapping(path="/allDataWarehouses")
 public @ResponseBody Iterable<Data_Warehouse> getAllDataWarehouses() {
  return dataWarehouseRepository.findAll();
 }
    @GetMapping(path="/getDataWarehouse/{id}")
    public @ResponseBody ResponseEntity<?> getDataWarehouse(@PathVariable("id") Integer id) {
        Optional<Data_Warehouse> dataWarehouse = dataWarehouseRepository.findById(id);
        if (dataWarehouse.isPresent()) {
            return ResponseEntity.ok(dataWarehouse.get());
        } else {
            return ResponseEntity.notFound().build();
        }
    }
    @GetMapping(path="/getDataWarehouseProduct/{datawarehouseID}/{productID}")
    public ResponseEntity<?> getDataWarehouseProduct(@PathVariable("datawarehouseID") Integer datawarehouseID, @PathVariable("productID") Integer productID) {
        Optional<Data_Warehouse> dataWarehouse = dataWarehouseRepository.findById(datawarehouseID);
        if (dataWarehouse.isPresent()) {
            Optional<Product> product = productRepository.findByIdAndDataWarehouse(productID, dataWarehouse.get());
            if (product.isPresent()) {
                return ResponseEntity.ok(product.get());
            } else {
                return ResponseEntity.notFound().build();
            }
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @PostMapping(path="/updateDataWarehouse/{datawarehouseID}")
    public ResponseEntity<?> updateDataWarehouse(@PathVariable("datawarehouseID") Integer datawarehouseID) {
        Data_Warehouse newDataWarehouse = new Data_Warehouse();
        Optional<Data_Warehouse> existingDataWarehouse = dataWarehouseRepository.findById(datawarehouseID);
        if (existingDataWarehouse.isPresent()) {
            Data_Warehouse updatedDataWarehouse = existingDataWarehouse.get();
            // Update the attributes of the existing data warehouse with the new data
            newDataWarehouse.setName("MusterHaus");
            newDataWarehouse.setId(datawarehouseID);
            // Save the updated data warehouse
            dataWarehouseRepository.save(newDataWarehouse);
            return ResponseEntity.ok("Data Warehouse updated successfully");
        } else {
            return ResponseEntity.notFound().build();
        }
    }

}


/**
  package com.example.accessingdatamysql;

  import org.springframework.beans.factory.annotation.Autowired;
  import org.springframework.http.ResponseEntity;
  import org.springframework.stereotype.Controller;
  import org.springframework.web.bind.annotation.*;

  import java.util.Optional;

@Controller	// This means that this class is a Controller
  @RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
  public class MainController {
  @Autowired // This means to get the bean called userRepository
  // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;

  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody String addNewUser (@RequestParam String name
  , @RequestParam String email) {
  // @ResponseBody means the returned String is the response, not a view name
  // @RequestParam means it is a parameter from the GET or POST request

  User n = new User();
  n.setName(name);
  n.setEmail(email);
  userRepository.save(n);
  return "Saved";
  }

  @GetMapping(path="/all")
  public @ResponseBody Iterable<User> getAllUsers() {
  // This returns a JSON or XML with the users
  return userRepository.findAll();
  }
    @DeleteMapping(path="/delete/all")
    public ResponseEntity<String> deleteAllUsers() {
      userRepository.deleteAll();
      return ResponseEntity.ok("All users deleted successfully");
    }

}
*/